/*
 * Sonar Css Plugin
 * Copyright (C) 2010 Kevin Weisser
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package blackboard.sonar.plugins.css.lex;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.PrintStream;
import java.io.Reader;
import java.util.ArrayList;
import java.util.List;

import blackboard.sonar.plugins.css.ProjectConfiguration;
import blackboard.sonar.plugins.css.node.Node;

import org.sonar.channel.ChannelDispatcher;
import org.sonar.channel.CodeReader;

import org.w3c.css.sac.InputSource;
import org.w3c.dom.css.CSSRule;
import org.w3c.dom.css.CSSRuleList;
import org.w3c.dom.css.CSSStyleDeclaration;
import org.w3c.dom.css.CSSStyleRule;
import org.w3c.dom.css.CSSStyleSheet;

import com.steadystate.css.parser.CSSOMParser;

/**
 * @author Kevin Weisser
 */
@SuppressWarnings("unchecked")
public final class StyleLexer {
	
	public List<Node> parse(Reader reader, File file) {
		// CodeReader reads the file stream
		CodeReader codeReader = new CodeReader(reader);

		// ArrayList collects the nodes
		List<Node> nodeList = new ArrayList<Node>();
		
		// ArrayList of tokens to parse the file. Order is very important here.
		List tokenizers = new ArrayList();
		
		//Add Comment Tokenizer
		tokenizers.add(new CommentTokenizer(ProjectConfiguration.OPENING_COMMENT, ProjectConfiguration.CLOSING_COMMENT));
		
		//Parse CSS file using CSS 2.0 standards and the cssparser APIs
		CSSStyleSheet stylesheet = Parse(file);
		
		if (stylesheet != null) {
			CSSRuleList ruleList = stylesheet.getCssRules();
			//For each rule declared in the CSS file create a StyleTokenizer using the rule
			//as the starting token and the } as the ending token
			for (int i = 0; i < ruleList.getLength(); i++) {
            	CSSRule rule = ruleList.item(i);
            	
            	if (rule instanceof CSSStyleRule) {
            		CSSStyleRule styleRule=(CSSStyleRule)rule;
            		tokenizers.add(new StyleTokenizer(removeAddedAsterisks(styleRule.getSelectorText()), ProjectConfiguration.CLOSING_BRACE, styleRule));         		
            	}
			}
        }
		
		//Add Text Tokenizer to consume everything else which has not yet been matched
		tokenizers.add(new TextTokenizer());

        // ChannelDispatcher manages the tokenizers
		ChannelDispatcher<List<Node>> channelDispatcher = new ChannelDispatcher<List<Node>>(tokenizers);
		channelDispatcher.consume(codeReader, nodeList);
        
		// clean up
		codeReader.close();

		return nodeList;
	}
	
	/**
	 * Function which manipulates the rule generated by the CSSParser to create our starting token for 
	 * the StyleTokenizer
	 * 
	 * @param selector
	 * @return String
	 */
	public String removeAddedAsterisks(String selector) {
		StringBuffer temp = new StringBuffer(selector.length());
		String split[] = selector.split(" ");
		
		for (int x = 0; x < split.length; x++) {
			String str = split[x];
			
			//CSS Parser always adds quotes to both sides of the attribute selector value. Remove the quotes.
			str = str.replaceAll("\"", "");
			
			if (str != null && str.length() > 0) {
				//CSS Parser appends universal selectors to qualify ID/Class selectors. Blackboard doesn't
				//do this by general practice so we need to remove the character the parser added in.
				if (str.length() == 1 || (str.length() == 2 && str.equalsIgnoreCase("*,")) || (str.length() > 1 && !str.startsWith(ProjectConfiguration.UNIVERSAL_SELECTOR))) {
    				temp.append(str);
    			} else {
    				temp.append(str.substring(1));
    			}
			}
		}
	
		return temp.toString().trim();
	}
	
	/**
	 * Parse the CSS file using the cssparser APIs
	 * 
	 * @param file
	 * @return
	 */
	public CSSStyleSheet Parse(File file) {
		CSSStyleSheet stylesheet = null;
        
        try {
        	InputStream stream = new FileInputStream(file);
			InputSource source = new InputSource(new InputStreamReader(stream));
	        CSSOMParser parser = new CSSOMParser();
	        stylesheet = parser.parseStyleSheet(source,null,null);
        } catch (IOException ioe) {
        	System.err.println ("IO Error: " + ioe);
        }
        catch (Exception e) {
        	System.err.println ("Error: " + e);
        } 
        
        return stylesheet;
    }
}
